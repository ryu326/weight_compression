import os
from huggingface_hub import snapshot_download, list_models

# Í≤ÄÏÉâÌï† Î™®Îç∏ Ï†ÄÏû•ÏÜå(repository) Ìå®ÌÑ¥ ÏÑ§Ï†ï
# ÏûëÏÑ±Ïûê(author)Îäî 'Lots-of-LoRAs'Ïù¥Í≥†,
# Ïù¥Î¶ÑÏóê 'Mistral-7B-Instruct-v0.2-4b-r16-task'Í∞Ä Ìè¨Ìï®Îêú Î™®Îì† Î™®Îç∏ÏùÑ Í≤ÄÏÉâÌï©ÎãàÎã§.
author = "Lots-of-LoRAs"
search_pattern = "Mistral-7B-Instruct-v0.2-4b-r16-task"

# Ï†ÄÏû• ÏúÑÏπò
cache_dir = "/workspace/Weight_compression/Wparam_dataset/lora/snapshots"

print("üîç Hugging Face HubÏóêÏÑú Ï†ÄÏû•ÏÜå Î™©Î°ùÏùÑ Í≤ÄÏÉâ Ï§ëÏûÖÎãàÎã§...")
try:
    # APIÎ•º Ïù¥Ïö©Ìï¥ Ï°∞Í±¥Ïóê ÎßûÎäî Î™®Îì† Î™®Îç∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    model_infos = list_models(author=author, search=search_pattern)
    
    # Î™®Îç∏ Ï†ïÎ≥¥ÏóêÏÑú repo_idÎßå Ï∂îÏ∂ú
    repo_ids = [info.id for info in model_infos]
    
    if not repo_ids:
        print("‚ö†Ô∏è Í≤ÄÏÉâÎêú Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§. Ìå®ÌÑ¥ÏùÑ Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
    else:
        print(f"‚úÖ Ï¥ù {len(repo_ids)}Í∞úÏùò Ï†ÄÏû•ÏÜåÎ•º Ï∞æÏïòÏäµÎãàÎã§.")

        # Îã§Ïö¥Î°úÎìú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        os.makedirs(cache_dir, exist_ok=True)

        # Ï∞æÏùÄ Î™®Îì† repo_idÏóê ÎåÄÌï¥ Îã§Ïö¥Î°úÎìú ÏãúÎèÑ
        for repo_id in repo_ids:
            # huggingface_hubÎäî repo_idÏùò '/'Î•º '--'Î°ú Î∞îÍøîÏÑú Ìè¥ÎçîÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
            # Ïòà: 'user/model' -> 'models--user--model'
            repo_folder_name = "models--" + repo_id.replace("/", "--")
            target_dir = os.path.join(cache_dir, repo_folder_name)

            # Ïù¥ÎØ∏ Ìï¥Îãπ Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ÌïòÏó¨ Îã§Ïö¥Î°úÎìúÎ•º Í±¥ÎÑàÎúÅÎãàÎã§.
            if os.path.exists(target_dir):
                print(f"‚úÖ Already exists: {repo_id}. Skipping.")
                continue

            # Îã§Ïö¥Î°úÎìú ÏãúÎèÑ
            try:
                print(f"üöÄ Downloading {repo_id}...")
                local_dir = snapshot_download(
                    repo_id=repo_id,
                    cache_dir=cache_dir,
                    local_dir_use_symlinks=False,
                    resume_download=True
                )
                print(f"‚úÖ Downloaded {repo_id} to {local_dir}")
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to download {repo_id}: {e}")
        
        print("\nüéâ All downloads finished.")

except Exception as e:
    print(f"üõë API ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {e}")

# # from huggingface_hub import snapshot_download

# # training_task_ids = [
# #     742,1198,717,705,275,636,84,1711,140,1448,453,1207,734,298,587,703,147,564,1341,201,
# #     890,908,1428,325,1669,246,357,1518,1148,1605,867,209,751,161,105,645,442,75,269,1568,
# #     834,1603,685,83,390,750,1631,1529,746,1217,725,889,492,620,294,641,318,846,316,1188,
# #     629,770,1482,499,955,719,723,87,211,901,1483,89,627,153,1342,828,64,1387,400,1294,243,
# #     1572,1151,574,428,366,926,1503,130,515,151,619,1562,632,966,605,1487,707,1379,1489,
# #     1567,1384,1404,691,728,219,964,1509,582,455,963,382,859,1393,1565,1720,670,689,324,
# #     1420,618,625,377,929,296,852,1332,1444,850,708,1292,110,155,429,245,137,1566,1146,924,
# #     22,118,687,1167,380,33,1502,865,181,228,698,956,732,721,370,1400,1199,1606,288,1670,
# #     207,1206,457,1308,1310,874,1541,1609,210,1318,365,755,123,1316,1378,475,903,70,720,
# #     67,1564,270,167,1504,178,277,1315,1434,192,1157,672,563,714,1212,495,1583,753,343,
# #     1427,92,1285,333,329,398,157,74,1506,697,285,393,1147,1585,648,353,1431,148,585,81,
# #     477,1582,355,381,633,93,722,566,1152,1452,1286,925,1703,833,1210,679,1203,1089,389,
# #     378,637,101,1355,640,344,1190,733,107,1209,505,1385,1135,328,609,413,72,1425,1451,713,
# #     642,1321,454,504,696,1429,1645,431,1317,131,675,1158,1325,1216,1347,1328,630,460,
# #     1665,1154,300,617,1508,628,600,1380,489,905,65,44,69,356,403,590,577,819,1721,351,
# #     904,244,1712,683,1197,1592,274,278,1534,891,694,497,488,144,1722,1728,291,284,1288,
# #     128,580,616,1401,716,1421,1656,1311,516,593,138,1186,1326,119,108,584,388,45,821,1581,
# #     695,596,568,85,1495,927,1453,1201,923,1204,1510,754,1403,1192,565,146,666,50,704,934,
# #     579,1196,267,206,936,323,494,461,1409,1313,76,686,740,34,1211,113,280,1551,116,518,
# #     1520,79,513,1590,1713,1386,63,183,1447,671,68,858,699,1593,700,1607,121,190,1168,195,
# #     1723,1449,363,1419,1398,893,326,1194,102,145,1338,391,176,319,359,856,1729,761,1320,
# #     1596,1601,615,1283,638,607,692,588,129,1200,1486,1406,583,94,1731,308,664,163,127,
# #     736,379,330,1599,875,1214,933,1319,456,1189,1657,517,385,472,47,1533,249,95,1479,724,
# #     1418,507,43,1394,149,1156,1598,322,1714,727,80,1704,77,1390,667,1724,1088,1087,550,
# #     892,674,1389,509,346,769,1391,1322,341,290,335,879,861,594,66,162,1584,1622,247
# # ]

# # # Validation task ids (11Í∞ú)
# # validation_task_ids = [
# #     35,39,1557,202,304,362,614,701,706,710,726
# # ]

# # repo_ids = [
# #     f"Lots-of-LoRAs/Mistral-7B-Instruct-v0.2-4b-r16-task{tid}"
# #     for tid in (training_task_ids + validation_task_ids)
# # ]

# # # Ï†ÄÏû• ÏúÑÏπò
# # cache_dir = "/workspace/Weight_compression/Wparam_dataset/lora/snapshots"

# # for repo_id in repo_ids:
# #     try:
# #         local_dir = snapshot_download(
# #             repo_id=repo_id,
# #             cache_dir=cache_dir,
# #             local_dir_use_symlinks=False,
# #             resume_download=True
# #         )
# #         print(f"‚úÖ Downloaded {repo_id} to {local_dir}")
# #     except Exception as e:
# #         print(f"‚ö†Ô∏è Failed to download {repo_id}: {e}")


# import os
# from huggingface_hub import snapshot_download

# # ÎÖºÎ¨∏ Î∂ÄÎ°ù Ìëú 3Ïóê Î™ÖÏãúÎêú 1000Í∞úÏùò Ï†ÑÏ≤¥ ÌÉúÏä§ÌÅ¨ ID Î™©Î°ùÏûÖÎãàÎã§.
# all_task_ids_str = "1556, 1433, 1108, 117, 1066, 108, 150, 501, 1253, 1457, 442, 1315, 1583, 300, 1210, 104, 148, 1285, 870, 858, 1284, 1509, 320, 296, 308, 1305, 1379, 1611, 149, 1512, 1282, 1382, 1450, 862, 347, 1524, 899, 1432, 1380, 152, 1569, 860, 1424, 119, 1294, 1501, 1293, 344, 298, 1342, 1222, 1454, 887, 319, 856, 311, 1265, 1178, 896, 126, 1584, 1204, 1448, 342, 1428, 872, 1574, 869, 1211, 1235, 868, 1482, 1273, 125, 1208, 144, 124, 1399, 1334, 1563, 1381, 1184, 151, 142, 1598, 1324, 1283, 1209, 123, 1374, 1341, 892, 1419, 1179, 1206, 1335, 1314, 156, 880, 313, 1378, 127, 130, 139, 1504, 145, 301, 129, 1418, 1188, 346, 121, 122, 159, 321, 143, 118, 1189, 1317, 120, 1441, 302, 158, 864, 1507, 1238, 317, 134, 1417, 881, 873, 304, 131, 137, 894, 1275, 891, 1183, 857, 1421, 157, 1200, 1186, 1207, 132, 1190, 889, 1201, 1244, 1272, 135, 1239, 1391, 1525, 318, 128, 345, 136, 1205, 1274, 133, 155, 1181, 140, 1256, 1249, 878, 1187, 866, 138, 883, 303, 1203, 1377, 1182, 1344, 141, 1225, 1236, 146, 147, 861, 867, 884, 153, 154, 890, 1240, 310, 1180, 1277, 1316, 874, 893, 316, 1242, 1328, 1276, 309, 1191, 863, 876, 1185, 877, 888, 1241, 314, 882, 875, 315, 886, 312, 1202, 1243, 1237, 885, 879, 895, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1278, 1279, 1280, 1281, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1318, 1319, 1320, 1321, 1322, 1323, 1325, 1326, 1327, 1329, 1330, 1331, 1332, 1333, 1336, 1337, 1338, 1339, 1340, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1375, 1376, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1420, 1422, 1423, 1425, 1426, 1427, 1429, 1430, 1431, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1442, 1443, 1444, 1445, 1446, 1447, 1449, 1451, 1452, 1453, 1455, 1456, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1502, 1503, 1505, 1506, 1508, 1510, 1511, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1557, 1558, 1559, 1560, 1561, 1562, 1564, 1565, 1566, 1567, 1568, 1570, 1571, 1572, 1573, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1612, 1613, 1614, 1615, 1616, 1177, 307, 306, 305, 299, 297, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 150, 149, 148, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164, 1163, 1162, 1161, 1160, 1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108, 1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001, 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 620, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322"
# all_task_ids = [tid.strip() for tid in all_task_ids_str.replace("task", "").replace("-", "").split(',')]
# all_task_ids = sorted(list(set(all_task_ids))) # Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è Ï†ïÎ†¨

# # ÎÖºÎ¨∏ Ìëú 2Ïùò Ï£ºÏöî ÌèâÍ∞Ä ÌÉúÏä§ÌÅ¨ (Validation task ids)
# # ÏÇ¨Ïö©ÏûêÍ∞Ä 11Í∞úÎ°ú Ïñ∏Í∏âÌñàÏßÄÎßå, ÎÖºÎ¨∏ÏóêÏÑúÎäî 10Í∞úÎ•º Î™ÖÏãúÌïòÏó¨ 10Í∞úÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
# validation_task_ids = [
#     '39', '190', '280', '290', '391', '442', '620', '1342', '1391', '1598'
# ]

# # validation ÌÉúÏä§ÌÅ¨Î•º Ï†úÏô∏Ìïú ÎÇòÎ®∏ÏßÄ ÌÉúÏä§ÌÅ¨Îì§
# training_task_ids = [
#     tid for tid in all_task_ids if tid not in validation_task_ids
# ]

# # repo_id Î¶¨Ïä§Ìä∏ ÏÉùÏÑ±
# # repo_ids = [
# #     f"Lots-of-LoRAs/Mistral-7B-Instruct-v0.2-4b-r16-task{tid}"
# #     for tid in (training_task_ids + validation_task_ids)
# # ]

# repo_ids = [
#     f"Lots-of-LoRAs/Mistral-7B-Instruct-v0.2-4b-r16-task{tid}"
#     for tid in range(2000)
# ]
# # Ï†ÄÏû• ÏúÑÏπò
# cache_dir = "/workspace/Weight_compression/Wparam_dataset/lora/snapshots"

# # Îã§Ïö¥Î°úÎìú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
# os.makedirs(cache_dir, exist_ok=True)

# for repo_id in repo_ids:
#     # huggingface_hubÎäî repo_idÏùò '/'Î•º '--'Î°ú Î∞îÍøîÏÑú Ìè¥ÎçîÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
#     # Ïòà: 'user/model' -> 'models--user--model'
#     repo_folder_name = "models--" + repo_id.replace("/", "--")
#     target_dir = os.path.join(cache_dir, repo_folder_name)

#     # Ïù¥ÎØ∏ Ìï¥Îãπ Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏ÌïòÏó¨ Îã§Ïö¥Î°úÎìúÎ•º Í±¥ÎÑàÎúÅÎãàÎã§.
#     if os.path.exists(target_dir):
#         print(f"‚úÖ Already exists: {repo_id}. Skipping.")
#         continue

#     # Îã§Ïö¥Î°úÎìú ÏãúÎèÑ
#     try:
#         print(f"üöÄ Downloading {repo_id}...")
#         local_dir = snapshot_download(
#             repo_id=repo_id,
#             cache_dir=cache_dir,
#             local_dir_use_symlinks=False,
#             resume_download=True
#         )
#         print(f"‚úÖ Downloaded {repo_id} to {local_dir}")
#     except Exception as e:
#         print(f"‚ö†Ô∏è Failed to download {repo_id}: {e}")

# print("\nüéâ All downloads finished.")